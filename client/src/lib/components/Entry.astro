---
import type { Entry } from "@lib/types.ts";
import EntryDetails from "./EntryDetails.astro";

interface Props {
  entry: Entry;
}

const { entry } = Astro.props as Props;

function formatIndex(index: number) {
  return (index + 1).toString().padStart(3, "0");
}
---

<script>
  import { filteredEntries } from "@lib/store.ts";

  class EntryWrapper extends HTMLElement {
    connectedCallback() {
      const id = this.dataset.id!;
      const el = document.getElementById(id)!;

      filteredEntries.subscribe((entries) => {
        if (entries.includes(id)) {
          el.classList.remove("hidden");
        } else {
          el.classList.add("hidden");
        }
      });
    }
  }

  customElements.define("entry-wrapper", EntryWrapper);
</script>

<entry-wrapper id={entry.id} data-id={entry.id}>
  <article class="flex-pad-gap">
    <header>
      <span class="index">
        {formatIndex(entry.index)}
      </span>
      <div class="flex-pad-gap content">
        <h3>{entry.title != "" ? entry.title : entry.expand.type.name}</h3>
        <div>
          {entry.expand.type.name}, {entry.author}, {entry.year}
        </div>
        <div class="bold">
          {entry.expand.campaign.map((campaign) => campaign.name).join(" ")}
        </div>
      </div>
    </header>
    <EntryDetails {entry} />
  </article>
</entry-wrapper>

<style>
  article {
    padding: 1rem;
    border-top: 1px solid var(--black);
    gap: 0.5rem;
  }

  header {
    display: flex;
  }

  h3 {
    margin: 0;
  }

  .index {
    font-size: 1.5rem;
    margin-right: 1rem;
  }

  .content {
    gap: 0.25rem;
  }

  .hidden {
    display: none;
  }
</style>
